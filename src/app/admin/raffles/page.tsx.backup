'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/contexts/AuthContext'
import { mockRaffles } from '@/lib/mockData'
import { Raffle } from '@/types/raffle'

export default function RaffleManagement() {
  const { user, isAuthenticated, isLoading } = useAuth()
  const router = useRouter()
  const [raffles, setRaffles] = useState<Raffle[]>(mockRaffles)
  const [filter, setFilter] = useState<'all' | 'active' | 'upcoming' | 'ended'>('all')
  const [searchTerm, setSearchTerm] = useState('')
  const [showDrawModal, setShowDrawModal] = useState(false)
  const [selectedRaffle, setSelectedRaffle] = useState<Raffle | null>(null)
  const [confirmText, setConfirmText] = useState('')

  // Redirect if not admin
  useEffect(() => {
    if (!isLoading) {
      if (!isAuthenticated) {
        router.push('/login?redirect=/admin/raffles')
        return
      }
      if (!user?.isAdmin) {
        router.push('/')
        return
      }
    }
  }, [isLoading, isAuthenticated, user?.isAdmin, router])

  // Show loading
  if (isLoading) {
    return (
      <div className="min-h-screen bg-slate-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-slate-600">Loading...</p>
        </div>
      </div>
    )
  }

  // Don't render if not admin (will redirect)
  if (!isAuthenticated || !user?.isAdmin) {
    return null
  }

  const filteredRaffles = raffles.filter(raffle => {
    const matchesFilter = filter === 'all' || raffle.status === filter
    const matchesSearch = raffle.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         raffle.prize.name.toLowerCase().includes(searchTerm.toLowerCase())
    return matchesFilter && matchesSearch
  })

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'upcoming':
        return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'ended':
        return 'bg-gray-100 text-gray-800 border-gray-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getTypeColor = (isInstantWin: boolean) => {
    return isInstantWin 
      ? 'bg-orange-100 text-orange-800 border-orange-200'
      : 'bg-purple-100 text-purple-800 border-purple-200'
  }

  const handleDrawWinner = () => {
    if (!selectedRaffle || confirmText !== 'TR√ÜK') return
    
    // Simulate drawing winner
    const winnerTicket = Math.floor(Math.random() * selectedRaffle.soldTickets) + 1
    
    // Update raffle status
    setRaffles(prev => prev.map(r => 
      r.id === selectedRaffle.id 
        ? { ...r, status: 'ended' as const }
        : r
    ))
    
    alert(`üéâ Vinder trukket!\n\nLodtr√¶kning: ${selectedRaffle.title}\nVindende billet: #${winnerTicket}\n\nDenne information er blevet logget i systemet.`)
    
    setShowDrawModal(false)
    setSelectedRaffle(null)
    setConfirmText('')
  }

  const calculateProfit = (raffle: Raffle) => {
    const revenue = raffle.soldTickets * raffle.ticketPrice
    const profit = revenue - raffle.prize.value
    return profit
  }

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Sidebar */}
      <div className="fixed inset-y-0 left-0 w-64 bg-white shadow-lg border-r border-slate-200">
        <div className="flex h-full flex-col">
          {/* Logo */}
          <div className="flex h-16 items-center border-b border-slate-200 px-4">
            <Link href="/admin" className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">DD</span>
              </div>
              <div>
                <div className="text-sm font-bold text-slate-900">DrawDash</div>
                <div className="text-xs text-slate-500">Admin Panel</div>
              </div>
            </Link>
          </div>
          
          {/* Navigation */}
          <nav className="flex-1 px-4 py-4">
            <div className="space-y-1">
              <Link href="/admin">
                <div className="text-slate-600 hover:bg-slate-50 hover:text-slate-900 px-3 py-2.5 text-sm font-medium rounded-xl flex items-center gap-3 transition-colors">
                  <svg className="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                  </svg>
                  Dashboard
                </div>
              </Link>
              
              <Link href="/admin/raffles">
                <div className="bg-gradient-to-r from-blue-50 to-purple-50 text-blue-700 border border-blue-200 px-3 py-2.5 text-sm font-medium rounded-xl flex items-center gap-3">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v13m0-13V6a2 2 0 112 0v1m-2 0V6a2 2 0 00-2 0v1m2 0V9.5m0 0v3m0-3h3m-3 0h-3m-2-5a9 9 0 1118 0 9 9 0 01-18 0z" />
                  </svg>
                  Lodtr√¶kninger
                  <div className="ml-auto w-2 h-2 bg-blue-500 rounded-full" />
                </div>
              </Link>
              
              <Link href="/admin/users">
                <div className="text-slate-600 hover:bg-slate-50 hover:text-slate-900 px-3 py-2.5 text-sm font-medium rounded-xl flex items-center gap-3 transition-colors">
                  <svg className="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m3 5.197H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Brugere
                </div>
              </Link>
              
              <Link href="/admin/finance">
                <div className="text-slate-600 hover:bg-slate-50 hover:text-slate-900 px-3 py-2.5 text-sm font-medium rounded-xl flex items-center gap-3 transition-colors">
                  <svg className="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Finans
                </div>
              </Link>
              
              <Link href="/admin/faq">
                <div className="text-slate-600 hover:bg-slate-50 hover:text-slate-900 px-3 py-2.5 text-sm font-medium rounded-xl flex items-center gap-3 transition-colors">
                  <svg className="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  FAQ
                </div>
              </Link>
            </div>
          </nav>
        </div>
      </div>
      
      {/* Main content */}
      <div className="pl-64">
        {/* Top bar */}
        <div className="sticky top-0 z-30 h-16 bg-white border-b border-slate-200 px-6 flex items-center justify-between shadow-sm">
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-sm text-slate-600">System Online</span>
          </div>
          <div className="text-sm text-slate-500">
            {new Date().toLocaleDateString('da-DK', {
              weekday: 'long',
              year: 'numeric',
              month: 'long', 
              day: 'numeric'
            })}
          </div>
        </div>

        <main className="px-6 py-8">
          <div className="space-y-6">
        {/* Header */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <div>
            <h1 className="text-2xl font-bold text-slate-900">Lodtr√¶kningsstyring</h1>
            <p className="text-slate-600">Administrer alle lodtr√¶kninger og konkurencer</p>
          </div>
          
          <Link href="/admin/raffles/new">
            <motion.button
              className="mt-4 sm:mt-0 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-2.5 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all"
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <svg className="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              Opret Ny Lodtr√¶kning
            </motion.button>
          </Link>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-xl p-4 border border-slate-200">
            <div className="text-sm text-slate-600">Total Oms√¶tning</div>
            <div className="text-xl font-bold text-slate-900">
              {raffles.reduce((sum, r) => sum + (r.soldTickets * r.ticketPrice), 0).toLocaleString()} kr
            </div>
          </div>
          <div className="bg-white rounded-xl p-4 border border-slate-200">
            <div className="text-sm text-slate-600">Total Profit</div>
            <div className="text-xl font-bold text-green-600">
              {raffles.reduce((sum, r) => sum + calculateProfit(r), 0).toLocaleString()} kr
            </div>
          </div>
          <div className="bg-white rounded-xl p-4 border border-slate-200">
            <div className="text-sm text-slate-600">Aktive</div>
            <div className="text-xl font-bold text-blue-600">
              {raffles.filter(r => r.status === 'active').length}
            </div>
          </div>
          <div className="bg-white rounded-xl p-4 border border-slate-200">
            <div className="text-sm text-slate-600">Afsluttet</div>
            <div className="text-xl font-bold text-gray-600">
              {raffles.filter(r => r.status === 'ended').length}
            </div>
          </div>
        </div>

        {/* Filters and Search */}
        <div className="bg-white rounded-xl p-6 border border-slate-200">
          <div className="flex flex-col sm:flex-row gap-4">
            {/* Status Filter */}
            <div className="flex space-x-1 p-1 bg-slate-100 rounded-lg">
              {[
                { key: 'all', label: 'Alle' },
                { key: 'active', label: 'Aktive' },
                { key: 'upcoming', label: 'Kommende' },
                { key: 'ended', label: 'Afsluttet' }
              ].map((option) => (
                <button
                  key={option.key}
                  onClick={() => setFilter(option.key as any)}
                  className={`px-3 py-2 text-sm font-medium rounded-md transition-all ${
                    filter === option.key
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-slate-600 hover:text-slate-900'
                  }`}
                >
                  {option.label}
                </button>
              ))}
            </div>

            {/* Search */}
            <div className="flex-1">
              <div className="relative">
                <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                <input
                  type="text"
                  placeholder="S√∏g lodtr√¶kninger..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </div>
          </div>
        </div>

        {/* Raffles Table */}
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead className="bg-slate-50 border-b border-slate-200">
                <tr>
                  <th className="px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Lodtr√¶kning
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Status/Type
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Progress
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Financials
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Slutdato
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Handlinger
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-slate-200">
                {filteredRaffles.map((raffle) => {
                  const progressPercentage = (raffle.soldTickets / raffle.totalTickets) * 100
                  const profit = calculateProfit(raffle)
                  const revenue = raffle.soldTickets * raffle.ticketPrice
                  
                  return (
                    <motion.tr
                      key={raffle.id}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="hover:bg-slate-50 transition-colors"
                    >
                      <td className="px-6 py-4">
                        <div className="flex items-center">
                          <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center mr-4">
                            <span className="text-white font-bold text-sm">
                              {raffle.title.substring(0, 2).toUpperCase()}
                            </span>
                          </div>
                          <div>
                            <div className="text-sm font-medium text-slate-900">
                              {raffle.title}
                            </div>
                            <div className="text-sm text-slate-500">
                              {raffle.ticketPrice} kr per billet ‚Ä¢ {raffle.prize.name}
                            </div>
                          </div>
                        </div>
                      </td>
                      
                      <td className="px-6 py-4 space-y-2">
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full border ${getStatusColor(raffle.status)}`}>
                          {raffle.status === 'active' ? 'Aktiv' : raffle.status === 'upcoming' ? 'Kommende' : 'Afsluttet'}
                        </span>
                        <br />
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full border ${getTypeColor(raffle.isInstantWin)}`}>
                          {raffle.isInstantWin ? 'Instant Win' : 'Normal'}
                        </span>
                      </td>
                      
                      <td className="px-6 py-4">
                        <div className="w-full bg-slate-200 rounded-full h-2 mb-2">
                          <div 
                            className="bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${Math.min(progressPercentage, 100)}%` }}
                          ></div>
                        </div>
                        <div className="text-sm text-slate-600">
                          {raffle.soldTickets}/{raffle.totalTickets} ({Math.round(progressPercentage)}%)
                        </div>
                      </td>
                      
                      <td className="px-6 py-4">
                        <div className="text-sm">
                          <div className="text-green-600 font-semibold">
                            +{revenue.toLocaleString()} kr oms√¶tning
                          </div>
                          <div className={`${profit >= 0 ? 'text-green-600' : 'text-red-600'} font-medium`}>
                            {profit >= 0 ? '+' : ''}{profit.toLocaleString()} kr profit
                          </div>
                        </div>
                      </td>
                      
                      <td className="px-6 py-4 text-sm text-slate-600">
                        {new Date(raffle.endDate).toLocaleDateString('da-DK', {
                          day: 'numeric',
                          month: 'short',
                          year: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </td>
                      
                      <td className="px-6 py-4">
                        <div className="flex space-x-2">
                          <Link href={`/admin/raffles/${raffle.id}`}>
                            <motion.button
                              className="px-3 py-1.5 text-xs font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors"
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                            >
                              Detaljer
                            </motion.button>
                          </Link>
                          
                          {raffle.status === 'active' && (
                            <motion.button
                              onClick={() => {
                                setSelectedRaffle(raffle)
                                setShowDrawModal(true)
                              }}
                              className="px-3 py-1.5 text-xs font-medium text-green-600 bg-green-50 rounded-lg hover:bg-green-100 transition-colors"
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                            >
                              Tr√¶k Vinder
                            </motion.button>
                          )}
                          
                          <Link href={`/admin/raffles/${raffle.id}/edit`}>
                            <motion.button
                              className="px-3 py-1.5 text-xs font-medium text-slate-600 bg-slate-50 rounded-lg hover:bg-slate-100 transition-colors"
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                            >
                              Rediger
                            </motion.button>
                          </Link>
                        </div>
                      </td>
                    </motion.tr>
                  )
                })}
              </tbody>
            </table>
          </div>
        </div>

        {filteredRaffles.length === 0 && (
          <div className="text-center py-12">
            <div className="text-slate-400 text-lg mb-2">Ingen lodtr√¶kninger fundet</div>
            <div className="text-slate-500">Pr√∏v at justere dine filtre eller opret en ny lodtr√¶kning</div>
          </div>
        )}
      </div>

      {/* Draw Winner Modal */}
      {showDrawModal && selectedRaffle && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white rounded-xl p-6 max-w-md w-full"
          >
            <div className="text-center mb-6">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-slate-900 mb-2">Tr√¶k Vinder</h3>
              <p className="text-slate-600">
                Du er ved at tr√¶kke vinderen for <strong>"{selectedRaffle.title}"</strong>
              </p>
              <div className="text-sm text-slate-500 mt-2">
                {selectedRaffle.soldTickets} deltagere ‚Ä¢ {selectedRaffle.totalTickets} billetter
              </div>
            </div>

            <div className="mb-6">
              <label className="block text-sm font-medium text-slate-700 mb-2">
                Skriv "TR√ÜK" for at bekr√¶fte:
              </label>
              <input
                type="text"
                value={confirmText}
                onChange={(e) => setConfirmText(e.target.value.toUpperCase())}
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent text-center font-mono text-lg"
                placeholder="TR√ÜK"
              />
            </div>

            <div className="flex space-x-3">
              <button
                onClick={() => {
                  setShowDrawModal(false)
                  setSelectedRaffle(null)
                  setConfirmText('')
                }}
                className="flex-1 px-4 py-2 border border-slate-300 text-slate-700 rounded-lg hover:bg-slate-50 transition-colors"
              >
                Annuller
              </button>
              <motion.button
                onClick={handleDrawWinner}
                disabled={confirmText !== 'TR√ÜK'}
                className={`flex-1 px-4 py-2 rounded-lg font-semibold transition-all ${
                  confirmText === 'TR√ÜK'
                    ? 'bg-red-600 text-white hover:bg-red-700'
                    : 'bg-slate-200 text-slate-400 cursor-not-allowed'
                }`}
                whileHover={confirmText === 'TR√ÜK' ? { scale: 1.02 } : {}}
                whileTap={confirmText === 'TR√ÜK' ? { scale: 0.98 } : {}}
              >
                Tr√¶k Vinder
              </motion.button>
            </div>
          </motion.div>
        </div>
      )}
        </div>
          </div>
        </main>
      </div>
    </div>
  )
}