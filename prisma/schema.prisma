// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table for authentication and user management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  phone       String?
  dateOfBirth DateTime? @map("date_of_birth") @db.Date
  isVerified  Boolean  @default(false) @map("is_verified")
  isAdmin     Boolean  @default(false) @map("is_admin")
  points      Int      @default(0)
  totalSpent  Decimal  @default(0.00) @map("total_spent") @db.Decimal(12, 2)
  loyaltyTier String   @default("bronze") @map("loyalty_tier")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  addresses         UserAddress[]
  raffleEntries     RaffleEntry[]
  payments          Payment[]
  sessions          UserSession[]
  verificationTokens VerificationToken[]
  pointTransactions PointTransaction[]
  auditLogs         AuditLog[]
  createdRaffles    Raffle[] @relation("RaffleCreator")
  wonRaffles        Raffle[] @relation("RaffleWinner")
  drawAudits        DrawAudit[]

  @@map("users")
}

// User addresses for billing/shipping
model UserAddress {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String   // 'billing', 'shipping'
  line1     String
  line2     String?
  city      String
  postcode  String
  country   String   @default("DK")
  isDefault Boolean  @default(false) @map("is_default")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

// Raffles/draws table
model Raffle {
  id                String    @id @default(cuid())
  title             String
  description       String
  imageUrl          String?   @map("image_url")
  ticketPrice       Decimal   @map("ticket_price") @db.Decimal(10, 2)
  totalTickets      Int       @map("total_tickets")
  soldTickets       Int       @default(0) @map("sold_tickets")
  startDate         DateTime  @default(now()) @map("start_date")
  endDate           DateTime  @map("end_date")
  status            String    @default("upcoming") // 'upcoming', 'active', 'ended', 'cancelled'
  winnerUserId      String?   @map("winner_user_id")
  winnerTicketNumber Int?     @map("winner_ticket_number")
  winnerDrawnAt     DateTime? @map("winner_drawn_at")
  createdBy         String    @map("created_by")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  creator     User           @relation("RaffleCreator", fields: [createdBy], references: [id])
  winner      User?          @relation("RaffleWinner", fields: [winnerUserId], references: [id])
  prizes      RafflePrize[]
  entries     RaffleEntry[]
  drawAudits  DrawAudit[]

  @@map("raffles")
}

// Raffle prizes
model RafflePrize {
  id          String   @id @default(cuid())
  raffleId    String   @map("raffle_id")
  name        String
  description String?
  value       Decimal  @db.Decimal(12, 2)
  imageUrl    String?  @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at")

  raffle Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)

  @@map("raffle_prizes")
}

// Raffle entries/tickets
model RaffleEntry {
  id               String   @id @default(cuid())
  raffleId         String   @map("raffle_id")
  userId           String   @map("user_id")
  quantity         Int
  totalAmount      Decimal  @map("total_amount") @db.Decimal(10, 2)
  paymentIntentId  String?  @map("payment_intent_id")
  paymentStatus    String   @default("pending") @map("payment_status") // 'pending', 'completed', 'failed', 'refunded'
  ticketNumbers    Int[]    @map("ticket_numbers")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  raffle            Raffle             @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment           Payment?
  pointTransactions PointTransaction[]

  @@map("raffle_entries")
}

// Payment transactions
model Payment {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  raffleEntryId    String?  @unique @map("raffle_entry_id")
  paymentIntentId  String   @unique @map("payment_intent_id")
  amount           Decimal  @db.Decimal(10, 2)
  currency         String   @default("DKK")
  status           String   // 'pending', 'succeeded', 'failed', 'cancelled', 'refunded'
  paymentMethodId  String?  @map("payment_method_id")
  metadata         Json?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  raffleEntry RaffleEntry? @relation(fields: [raffleEntryId], references: [id])

  @@map("payments")
}

// User sessions for authentication
model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Email verification tokens
model VerificationToken {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  token     String    @unique
  type      String    // 'email_verification', 'password_reset'
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

// System settings/configuration
model SystemSetting {
  key         String    @id
  value       Json
  description String?
  updatedBy   String?   @map("updated_by")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  @@map("system_settings")
}

// Audit log for admin actions
model AuditLog {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String?  @map("resource_id")
  details      Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

// Loyalty tiers definition table
model LoyaltyTier {
  tier             String   @id
  name             String
  minSpent         Decimal  @map("min_spent") @db.Decimal(12, 2)
  pointsMultiplier Decimal  @default(1.00) @map("points_multiplier") @db.Decimal(3, 2)
  benefits         Json?
  color            String?
  icon             String?
  createdAt        DateTime @default(now()) @map("created_at")

  @@map("loyalty_tiers")
}

// Point transactions for tracking point history
model PointTransaction {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  raffleEntryId  String?  @map("raffle_entry_id")
  type           String   // 'earned', 'redeemed', 'bonus', 'refunded'
  points         Int
  description    String
  metadata       Json?
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  raffleEntry RaffleEntry? @relation(fields: [raffleEntryId], references: [id])

  @@map("point_transactions")
}

// Draw audit for transparency and compliance
model DrawAudit {
  id                   String   @id @default(cuid())
  raffleId             String   @map("raffle_id")
  drawMethod           String   @map("draw_method")    // 'CRYPTO_SECURE', 'EXTERNAL_WITNESS', etc.
  randomSeed           String   @map("random_seed")    // For verification
  seedHash             String?  @map("seed_hash")      // Pre-commitment hash
  winningTicketNumber  Int      @map("winning_ticket_number")
  winnerUserId         String   @map("winner_user_id")
  totalTickets         Int      @map("total_tickets")
  participantCount     Int      @map("participant_count")
  drawProof            String   @map("draw_proof")     // Base64 encoded proof data
  witnessSignature     String?  @map("witness_signature")
  videoUrl             String?  @map("video_url")
  blockchainHash       String?  @map("blockchain_hash") // External entropy
  timestamp            DateTime @default(now())
  isVerified           Boolean  @default(false) @map("is_verified")
  verifiedAt           DateTime? @map("verified_at")
  verifiedBy           String?  @map("verified_by")
  
  // Relations
  raffle Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  winner User   @relation(fields: [winnerUserId], references: [id])
  
  @@map("draw_audits")
}